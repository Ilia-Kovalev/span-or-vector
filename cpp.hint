// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define BOOST_CHECK_EQUAL(L, R) BOOST_TEST_TOOL_IMPL( 0, ::boost::test_tools::tt_detail::equal_impl_frwd(), "", CHECK, CHECK_EQUAL, (L)(R) )
#define BOOST_CHECK_EQUAL(L, R) BOOST_TEST_CHECK( L == R )
#define BOOST_CHECK_EQUAL_COLLECTIONS(L_begin, L_end, R_begin, R_end) BOOST_TEST_TOOL_IMPL( 1, ::boost::test_tools::tt_detail::equal_coll_impl(), "", CHECK, CHECK_EQUAL_COLL, (L_begin)(L_end)(R_begin)(R_end) )
#define BOOST_CHECK_EQUAL_COLLECTIONS(L_begin, L_end, R_begin, R_end) BOOST_TEST_CHECK( ::boost::test_tools::tt_detail::make_it_pair(L_begin, L_end) == ::boost::test_tools::tt_detail::make_it_pair(R_begin, R_end), ::boost::test_tools::per_element() )
#define BOOST_CHECK(P) BOOST_TEST_TOOL_IMPL( 2, (P), BOOST_TEST_STRINGIZE( P ), CHECK, CHECK_PRED, _ )
#define BOOST_CHECK(P) BOOST_TEST_CHECK( P )
#define BOOST_CHECK_NE(L, R) BOOST_TEST_TOOL_IMPL( 0, ::boost::test_tools::tt_detail::ne_impl(), "", CHECK, CHECK_NE, (L)(R) )
#define BOOST_CHECK_NE(L, R) BOOST_TEST_CHECK( L != R )
#define BOOST_AUTO_TEST_CASE(__VA_ARGS__) BOOST_TEST_INVOKE_IF_N_ARGS( 1, BOOST_AUTO_TEST_CASE_NO_DECOR, BOOST_AUTO_TEST_CASE_WITH_DECOR, __VA_ARGS__)
#define BOOST_AUTO_TEST_CASE(test_name) BOOST_AUTO_TEST_CASE_NO_DECOR( test_name )
#define BOOST_AUTO_TEST_SUITE(__VA_ARGS__) BOOST_TEST_INVOKE_IF_N_ARGS( 1, BOOST_AUTO_TEST_SUITE_NO_DECOR, BOOST_AUTO_TEST_SUITE_WITH_DECOR, __VA_ARGS__)
#define BOOST_AUTO_TEST_SUITE(suite_name) BOOST_AUTO_TEST_SUITE_NO_DECOR( suite_name )
#define BOOST_AUTO_TEST_SUITE_END() BOOST_AUTO_TU_REGISTRAR( end_suite )( 1 ); }
#define assert(expr) (__ASSERT_VOID_CAST (0))
#define assert(expr) (static_cast <bool> (expr) ? void (0) : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
#define assert(expr) ((expr) ? __ASSERT_VOID_CAST (0) : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
#define assert(expr) ((void) sizeof ((expr) ? 1 : 0), __extension__ ({ if (expr) ; else __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION); }))
#define assert(expression) ((void)0)
#define assert(expression) (void)( (!!(expression)) || (_wassert(_CRT_WIDE(#expression), _CRT_WIDE(__FILE__), (unsigned)(__LINE__)), 0) )
